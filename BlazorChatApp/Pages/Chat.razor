@page "/chat"

@using BlazorChatApp.Hubs
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h3>Index</h3>

<div class="form-group">
    <label>
        User: <input @bind="userInput" />
    </label>
</div>

<div class="form-group">
    <label>
        Message: <input @bind="messageInput" />
    </label>
</div>

<button @onclick="Send" disabled="@(!IsConnected)">Send Message</button>


<hr />

<ul>
    @foreach (string message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? userInput;
    private string? messageInput;


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("./chathub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var formattedMessage = $"{user} said: {message}";


            messages.Add(formattedMessage);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if(hubConnection is not null)
        {
            await hubConnection.SendAsync(nameof(ChatHub.SendMessage), userInput, messageInput);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;


    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
 